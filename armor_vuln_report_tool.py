import pandas as pd
import fnmatch


def create_sheet(writer, sheet_name, data,
                 column_widths=None, filter_column=None):
    if sheet_name in writer.book.sheetnames:
        writer.book.remove(writer.book[sheet_name])

    data.to_excel(writer, sheet_name=sheet_name, index=False)
    worksheet = writer.sheets[sheet_name]

    if column_widths:
        for col, width in column_widths.items():
            idx = data.columns.get_loc(col)
            worksheet.column_dimensions[chr(65 + idx)].width = width

    if filter_column:
        worksheet.auto_filter.ref = worksheet.dimensions


# Prompt user for input file name
excel_file = input("Enter the file name with full path: ").strip('"')

# Concatenate data from 'SevCritical', 'SevHigh', 'SevMedium', 'SevLow', and 'Information' sheets into 'All' sheet
sheets_to_concat = ['SevCritical', 'SevHigh', 'SevMedium', 'SevLow', 'Information']
all_dfs = [pd.read_excel(excel_file, sheet_name=sheet).query('CvssScore != 0') for sheet in sheets_to_concat]
df_all = pd.concat(all_dfs, ignore_index=True)

# Create the "All" sheet
with pd.ExcelWriter(excel_file, engine='openpyxl', mode='a') as writer:
    create_sheet(writer, 'All', df_all)

# Sort sheets 'Past Week', 'SevCritical', 'SevHigh', 'SevMedium', 'SevLow', and 'Information' by 'CvssScore'
sheets_to_sort = ['Past Week'] + sheets_to_concat
with pd.ExcelWriter(excel_file, engine='openpyxl', mode='a') as writer:
    for sheet_name in sheets_to_sort:
        df_sheet = pd.read_excel(excel_file, sheet_name=sheet_name)
        df_sheet = df_sheet.sort_values(by='CvssScore', ascending=False)
        create_sheet(writer, sheet_name, df_sheet)

# "Top 10 By Count" sheet
df_top_10 = df_all.groupby(['CvssScore', 'Vulnerability Name']).size().reset_index(name='Vulnerability Count')
df_top_10 = df_top_10.sort_values(by='Vulnerability Count', ascending=False).head(10)

# "By OS" sheet
df_by_os = df_all[(df_all['CvssScore'] != 0) & df_all['CveList'].notna()]
df_by_os = df_by_os.groupby('OperatingSystem')['Vulnerability Name'].count().reset_index()
df_by_os = df_by_os.rename(columns={'Vulnerability Name': 'Vulnerability Count'})
df_by_os = df_by_os.sort_values(by='Vulnerability Count', ascending=False)

# "By Host" sheet
df_by_host = df_all[(df_all['CvssScore'] != 0) & df_all['CveList'].notna()]
selected_columns_by_host = ['HostName', 'IpAddress', 'Vulnerability Name']
df_by_host = df_by_host.groupby(['HostName', 'IpAddress']).size().reset_index(name='Vulnerability Count').sort_values(by='Vulnerability Count', ascending=False)

# "In Scope" sheet
include_vuln_list = ['Microsoft Windows Security', 'Amazon Linux Security Advisory', 'CentOS Security Update']
df_in_scope = df_all[df_all['CveList'].notna() & df_all['Vulnerability Name'].str.contains('|'.join(include_vuln_list), case=False, na=False)]
selected_columns_in_scope = ['CvssScore', 'HostName', 'IpAddress', 'Vulnerability Name', 'Discovered Date', 'CveList', 'Description', 'Consequence', 'Proof', 'Solution', 'OperatingSystem']
df_in_scope = df_in_scope[selected_columns_in_scope].sort_values(by='CvssScore', ascending=False)

# "Out of Scope" sheet
exclude_vuln_list = ['Microsoft Windows Security', 'Amazon Linux Security Advisory', 'CentOS Security Update']
df_out_of_scope = df_all[~df_all['Vulnerability Name'].fillna('').str.contains('|'.join(exclude_vuln_list), case=False) & df_all['CveList'].notna()]
selected_columns_out_of_scope = ['CvssScore', 'HostName', 'IpAddress', 'Vulnerability Name', 'Discovered Date', 'CveList', 'Description', 'Consequence', 'Proof', 'Solution', 'OperatingSystem']
df_out_of_scope = df_out_of_scope[selected_columns_out_of_scope].sort_values(by='CvssScore', ascending=False)

# "Cloud Posture" sheet
df_cloud_posture = df_all[df_all['CveList'].isna()]
selected_columns_cloud_posture = ['CvssScore', 'HostName', 'IpAddress', 'Vulnerability Name', 'Discovered Date', 'Description', 'Consequence', 'Proof', 'Solution', 'OperatingSystem']
df_cloud_posture = df_cloud_posture[selected_columns_cloud_posture].sort_values(by='CvssScore', ascending=False)

# Create sheets
with pd.ExcelWriter(excel_file, engine='openpyxl', mode='a') as writer:
    create_sheet(writer, 'Top 10 By Count', df_top_10, {
        'CvssScore': 14,
        'Vulnerability Name': 65,
        'Vulnerability Count': 22
    }, filter_column='Vulnerability')

    create_sheet(writer, 'By OS', df_by_os, {
        'OperatingSystem': 50,
        'Vulnerability Count': 22
    }, filter_column='Vulnerability Count')

    create_sheet(writer, 'By Host', df_by_host, {
        'HostName': 22,
        'IpAddress': 14,
        'Vulnerability Count': 22
    }, filter_column='Vulnerability Count')

    create_sheet(writer, 'In Scope', df_in_scope, {
        'HostName': 22, 'Vulnerability Name': 60,
        'Description': 60, 'Solution': 60, 'Proof': 60,
        'Consequence': 60, 'OperatingSystem': 60,
        'CvssScore': 14, 'CveList': 10, 'IpAddress': 14
    }, filter_column='OperatingSystem')

    create_sheet(writer, 'Out of Scope', df_out_of_scope, {
        'HostName': 22, 'Vulnerability Name': 60,
        'Description': 60, 'Solution': 60, 'Proof': 60,
        'Consequence': 60, 'OperatingSystem': 60,
        'CvssScore': 14, 'CveList': 10, 'IpAddress': 14
    }, filter_column='OperatingSystem')

    create_sheet(writer, 'Cloud Posture', df_cloud_posture, {
        'HostName': 22, 'Vulnerability Name': 60,
        'Description': 60, 'Solution': 60, 'Proof': 60,
        'Consequence': 60, 'OperatingSystem': 60,
        'CvssScore': 14, 'IpAddress': 14
    }, filter_column='OperatingSystem')

    # Sort sheets
    wildcard_pattern = 'CISA - *'
    matching_sheets = fnmatch.filter(writer.book.sheetnames, wildcard_pattern)
    
    if matching_sheets:
        matching_sheet = matching_sheets[0] 
        sheet_order = ['Summary', 'Past Week', 'Top 10 By Count',
                        'By OS', 'By Host', 'In Scope', 'Out of Scope',
                        'Cloud Posture', 'All', 'SevCritical', 'SevHigh', 'SevMedium', 'SevLow',
                        'Information', 'Older Than 90 Days', matching_sheet]

        writer.book._sheets.sort(key=lambda x: sheet_order.index(x.title))
        print("Vulnerability Report Created!")
    else:
        print(f"No sheet found matching the pattern '{wildcard_pattern}'.")
