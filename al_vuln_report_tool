import pandas as pd
import fnmatch


def create_sheet(writer, sheet_name, data,
                 column_widths=None, filter_column=None):
    if sheet_name in writer.book.sheetnames:
        writer.book.remove(writer.book[sheet_name])

    data.to_excel(writer, sheet_name=sheet_name, index=False)
    worksheet = writer.sheets[sheet_name]

    if column_widths:
        for col, width in column_widths.items():
            idx = data.columns.get_loc(col)
            worksheet.column_dimensions[chr(65 + idx)].width = width

    if filter_column:
        worksheet.auto_filter.ref = worksheet.dimensions


# Prompt user for input file name
excel_file = input("Enter the file name with full path: ").strip('"')

df_all = pd.read_excel(excel_file, sheet_name='All')

# Sort sheets 'Past Week', 'SevHigh', 'SevMedium', and 'SevLow' by 'CVSS Score'
sheets_to_sort = ['Past Week', 'SevHigh', 'SevMedium', 'SevLow']
with pd.ExcelWriter(excel_file, engine='openpyxl', mode='a') as writer:
    for sheet_name in sheets_to_sort:
        df_sheet = pd.read_excel(excel_file, sheet_name=sheet_name)
        df_sheet = df_sheet.sort_values(by='CVSS Score', ascending=False)
        create_sheet(writer, sheet_name, df_sheet)

# "Top 10 Vulnerabilities" sheet
df_top_10 = df_all[df_all['CVE'].notna()]
df_top_10 = df_top_10.groupby(['CVSS Score', 'Vulnerability'])[
    'CVE'].count().reset_index()
df_top_10 = df_top_10.rename(columns={'CVE': 'Vulnerability Count'})
selected_columns_top_10 = ['CVSS Score', 'Vulnerability',
                           'Vulnerability Count']
df_top_10 = df_top_10[selected_columns_top_10].sort_values(
    by='Vulnerability Count', ascending=False).head(10)

# "By OS" sheet
df_by_os = df_all[(df_all['CVSS Score'] != 0) & df_all['CVE'].notna()]
df_by_os = df_by_os.groupby('Operating System')['Vulnerability']. \
    count().reset_index()
df_by_os = df_by_os.rename(columns={'Vulnerability': 'Vulnerability Count'})
df_by_os = df_by_os.sort_values(by='Vulnerability Count', ascending=False)

# "By Host" sheet
df_by_host = df_all[(df_all['CVSS Score'] != 0) & df_all['CVE'].notna()]
selected_columns_by_host = ['Deployment Name', 'Host Name',
                            'Ip Address', 'Vulnerability Count']
df_by_host = df_by_host.groupby(['Deployment Name', 'Host Name', 'Ip Address']
                                )['Vulnerability'].count().reset_index()

df_by_host = df_by_host.rename(columns={
    'Vulnerability': 'Vulnerability Count'})
df_by_host = df_by_host[selected_columns_by_host]. \
    sort_values(by='Vulnerability Count', ascending=False)

# "In Scope" sheet
include_vuln_list = ['Microsoft - Windows', 'Amazon Linux Security Advisory',
                     'CentOS Security Update']
df_in_scope = df_all[df_all['CVE'].notna() & df_all
                     ['Vulnerability'].str.contains
                     ('|'.join(include_vuln_list), case=False, na=False)]
selected_columns_in_scope = [
    'CVSS Score', 'Deployment Name', 'Host Name', 'Ip Address',
    'Vulnerability', 'First Seen', 'CVE', 'Description', 'Impact',
    'Evidence', 'Resolution', 'Operating System', 'Reference'
]

df_in_scope = df_in_scope[selected_columns_in_scope]. \
    sort_values(by='CVSS Score', ascending=False)

# "Out of Scope" sheet
exclude_vuln_list = ['Microsoft - Windows', 'Amazon Linux Security Advisory',
                     'CentOS Security Update']
df_out_of_scope = df_all[~df_all['Vulnerability'].fillna('').str.contains
                         ('|'.join(exclude_vuln_list), case=False)
                         & df_all['CVE'].notna()]

selected_columns_out_of_scope = [
    'CVSS Score', 'Deployment Name', 'Host Name', 'Ip Address',
    'Vulnerability', 'First Seen', 'CVE', 'Description', 'Impact',
    'Evidence', 'Resolution', 'Operating System', 'Reference'
]
df_out_of_scope = df_out_of_scope[selected_columns_out_of_scope]. \
    sort_values(by='CVSS Score', ascending=False)

# "Cloud Posture" sheet
df_cloud_posture = df_all[df_all['CVE'].isna()]
selected_columns_cloud_posture = [
    'CVSS Score', 'Deployment Name', 'Host Name', 'Ip Address',
    'Vulnerability', 'First Seen', 'Description', 'Impact',
    'Evidence', 'Resolution', 'Operating System', 'Reference'
]
df_cloud_posture = df_cloud_posture[selected_columns_cloud_posture] \
    .sort_values(by='CVSS Score', ascending=False)

# Create sheets
with pd.ExcelWriter(excel_file, engine='openpyxl', mode='a') as writer:
    create_sheet(writer, 'Top 10 Vulnerabilities', df_top_10, {
        'CVSS Score': 14,
        'Vulnerability': 65,
        'Vulnerability Count': 22
    }, filter_column='Vulnerability')

    create_sheet(writer, 'By OS', df_by_os, {
        'Operating System': 50,
        'Vulnerability Count': 22
    }, filter_column='Vulnerability Count')

    create_sheet(writer, 'By Host', df_by_host, {
        'Deployment Name': 28,
        'Host Name': 22,
        'Ip Address': 14,
        'Vulnerability Count': 22
    }, filter_column='Vulnerability Count')

    create_sheet(writer, 'In Scope', df_in_scope, {
        'Deployment Name': 28, 'Host Name': 22, 'Vulnerability': 60,
        'Description': 60, 'Resolution': 60, 'Evidence': 60, 'Impact': 60,
        'Operating System': 60, 'Reference': 60, 'First Seen': 20,
        'CVSS Score': 14, 'CVE': 10, 'Ip Address': 14
    }, filter_column='Operating System')

    create_sheet(writer, 'Out of Scope', df_out_of_scope, {
        'Deployment Name': 28, 'Host Name': 22, 'Vulnerability': 60,
        'Description': 60, 'Resolution': 60, 'Evidence': 60, 'Impact': 60,
        'Operating System': 60, 'Reference': 60, 'First Seen': 20,
        'CVSS Score': 14, 'CVE': 10, 'Ip Address': 14
    }, filter_column='Operating System')

    create_sheet(writer, 'Cloud Posture', df_cloud_posture, {
        'Deployment Name': 28, 'Host Name': 22, 'Vulnerability': 60,
        'Description': 60, 'Resolution': 60, 'Evidence': 60, 'Impact': 60,
        'Operating System': 60, 'Reference': 60, 'First Seen': 20,
        'CVSS Score': 14, 'Ip Address': 14
    }, filter_column='Operating System')

    # Sort sheets
    wildcard_pattern = 'CISA - *'
    matching_sheets = fnmatch.filter(writer.book.sheetnames, wildcard_pattern)

    if matching_sheets:
        matching_sheet = matching_sheets[0]
        sheet_order = ['Summary', 'Past Week', 'Top 10 Vulnerabilities',
                       'By OS', 'By Host', 'In Scope', 'Out of Scope',
                       'Cloud Posture', 'SevHigh', 'SevMedium', 'SevLow',
                       'Older Than 90 Days', matching_sheet, 'All']

        writer.book._sheets.sort(key=lambda x: sheet_order.index(x.title))
        print("Vulnerability Report Created!")
    else:
        print(f"No sheet found matching the pattern '{wildcard_pattern}'.")
